import jwt from 'jsonwebtoken';
import { verificarToken } from '../../middleware/token'; 
import config from '../../config/config'; 
import httpMocks from 'node-mocks-http'; 

describe('Prueba unitaria para la funcion verificarToken', () => {
  let mockToken: string;

  beforeAll(() => {
    
    mockToken = jwt.sign(
      { secret: config.privateKey },
      config.publicKey,
      { expiresIn: 2000, subject: 'Marrocar' }
    );
  });

  it('debe verificar que el token es válido y llamar a next()', () => {
    const req = httpMocks.createRequest({
      headers: {
        authorization: `Bearer ${mockToken}`
      }
    });

    const res = httpMocks.createResponse();
    const next = jest.fn(); 

    verificarToken(req, res, next);

    expect(next).toHaveBeenCalled(); 
    expect(res.statusCode).toBe(200); 
  });

  it('debe devolver un estado 400 si el token es inválido', () => {
    const req = httpMocks.createRequest({
      headers: {
        authorization: 'Bearer token-invalido'
      }
    });

    const res = httpMocks.createResponse();
    const next = jest.fn();

    verificarToken(req, res, next);

    expect(res.statusCode).toBe(400);
    expect(res._getJSONData()).toEqual({ message: 'Token inválido o no autorizado' });
    expect(next).not.toHaveBeenCalled(); 
  });
});
